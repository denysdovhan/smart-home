#!/usr/bin/env bash

#
# ARGUMENTS
#

if [ "$#" -eq 2 ]; then
  STACK="$1"
  STACK_DIR="$SMART_HOME_DIR/$STACK"
  COMMAND="$2"
  shift 2
else
  COMMAND="$1"
  shift 1
fi
COMMAND_ARGS=("${@}")

#
# UTILS
#

function smart-home:utils:validate() {
  if [ "$(type -t smart-home:command:"$COMMAND")" = function ]; then
    return 0
  elif [ -d "$STACK_DIR/compose.yml" ] \
    && [ "$(type -t smart-home:docker:"$COMMAND")" = function ]; then
    return
  elif [ -z "$COMMAND" ]; then
    smart-home:command:help
    return 0
  else
    echo "Unknown command: $COMMAND"
    return 1
  fi
}

function smart-home:utils:jump() {
  pushd "$1" > /dev/null || exit 1
}

function smart-home:utils:back() {
  popd > /dev/null || exit 1 
}

function smart-home:utils:list_stacks() {
  find . -maxdepth 2 -type f -name 'compose.yml' -printf '%h\n'
}

function smart-home:exists() {
  command -v "$1" > /dev/null 2>&1
}

#
# DOCKER
#

function smart-home:docker:up() {
  docker compose up -d $*
}

function smart-home:docker:stop() {
  docker compose stop $*
}

function smart-home:docker:down() {
  docker compose down --remove-orphans $*
}

function smart-home:docker:restart() {
  docker compose restart $* 
}

function smart-home:docker:update() {
  echo "Pulling latest images..."
  docker compose pull $*
  echo "Building images..."
  docker compose build $*
  echo "Starting containers..."
  docker compose up -d $*
  echo "Prune to free up space..."
  docker system prune --volumes -f
}

#
# COMMANDS
#

function smart-home:command:help() {
  echo "
  üè° Denys Dovhan Smart Home

  smart-home help                       print this help message
  smart-home init                       install dependencies
  smart-home start                      start all services
  smart-home stop                       stop all services
  smart-home down                       stop and remove all containers
  smart-home restart                    restart all services
  smart-home update                     stop, update and restart all services
  smart-home prune                      delete obsolete containers
  smart-home password                   generate a password
  smart-home setup-network              setup network settings
"
}

function smart-home:command:init() {
  # Update packages
  sudo apt-get update
  sudo apt-get upgrade

  # Install docker
  if ! smart-home:exists docker; then
    echo "Installing docker..."
    curl -fsSL https://get.docker.com | sh
    sudo usermod -G docker -a "$USER"
  fi

  if ! smart-home:exists docker-compose; then
    echo "Installing docker-compose..."
    sudo apt install -y docker-compose
  fi

  echo "Installing additional packages..."
  sudo apt-get install -y git python3-pip nodejs

  echo "Installing python dependencies..."
  pip3 install -r "$SMART_HOME_DIR/requirements.txt"
  
  echo "Addint pre-commit hooks..."
  pre-commit install

  echo "Done!"
  echo "Please, reboot!"
}

function smart-home:command:up() {
  echo "Starting up all stacks..."
  for stack in $(smart-home:utils:list_stacks); do
    echo "Starting up $(basename $stack)..."
    smart-home:utils:jump "$stack"
    smart-home:docker:up "$@"
    smart-home:utils:back
  done
}

function smart-home:command:stop() {
  echo "Stopping all stacks..."
  for stack in $(smart-home:utils:list_stacks); do
    echo "Stopping $(basename $stack)..."
    smart-home:utils:jump "$stack"
    smart-home:docker:stop "$@"
    smart-home:utils:back
  done
}

function smart-home:command:down() {
  echo "Taking down all stacks..."
  for stack in $(smart-home:utils:list_stacks); do
    echo "Taking down $(basename $stack)..."
    smart-home:utils:jump "$stack"
    smart-home:docker:down "$@"
    smart-home:utils:back
  done
}

function smart-home:command:update() {
  echo "Updating all stacks..."
  for stack in $(smart-home:utils:list_stacks); do
    echo "Updating $(basename $stack)..."
    smart-home:utils:jump "$stack"
    smart-home:docker:update "$@"
    smart-home:utils:back
  done
}

function smart-home:command:restart() {
  echo "Restarting all stacks..."
  for stack in $(smart-home:utils:list_stacks); do
    echo "Restarting $(basename $stack)..."
    smart-home:utils:jump "$stack"
    smart-home:docker:restart "$@"
    smart-home:utils:back
  done
}

function smart-home:command:prune() {
  docker system prune --volumes
}

function smart-home:command:password() {
  local password length
  length=${1:-16}
  password="$(openssl rand -base64 $length | rev | cut -b 2- | rev)";

  echo "$password"
}

function smart-home:command:docs() {
  local ip="$(hostname -I | awk '{print $1}')"
  mkdocs serve --livereload --dev-addr "$ip:7000"
}

#
# MAIN
#

function main() {
  if [ -z "$SMART_HOME_DIR" ]; then
    echo "\$SMART_HOME_DIR is unset";
    return 1;
  fi;

  if ! smart-home:utils:validate; then
    smart-home:command:help
    return 1
  fi

  smart-home:utils:jump "$SMART_HOME_DIR"

  # Run command in the $STACK context
  if [ -n "$STACK" ]; then
    smart-home:utils:jump "$STACK_DIR"
    smart-home:docker:"$COMMAND" "${COMMAND_ARGS[*]}"
    smart-home:utils:back
    return $?
  fi

  smart-home:command:"$COMMAND" "${COMMAND_ARGS[*]}"
  smart-home:utils:back

  return $?
}

main
